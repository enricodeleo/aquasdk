{{#ifEquals strategy 'hierarchical'}}
/**
 * Resource factory for {{resource.name}}
 * Generated: {{timestamp}}
 */

const factory = (client, parentPath = '') => {
  const resource = (id) => {
    const path = parentPath ? `${parentPath}/${id}` : `{{resource.name}}/${id}`;

    return {
      {{#if resource.operations.get}}
      /**
       * {{resource.operations.get.summary}}
       * @param {object} [query] - Query parameters
       */
      get: (query = {}) => client.request({
        method: '{{resource.operations.get.method}}',
        url: `/${path}`,
        params: query
      }),
      {{/if}}

      {{#if resource.operations.update}}
      /**
       * {{resource.operations.update.summary}}
       * @param {object} data - The data to update.
       * @param {object} [query] - Query parameters
       */
      update: (data, query = {}) => client.request({
        method: '{{resource.operations.update.method}}',
        url: `/${path}`,
        data,
        params: query
      }),
      {{/if}}

      {{#if resource.operations.destroy}}
      /**
       * {{resource.operations.destroy.summary}}
       * @param {object} [query] - Query parameters
       */
      destroy: (query = {}) => client.request({
        method: '{{resource.operations.destroy.method}}',
        url: `/${path}`,
        params: query
      }),
      {{/if}}

      {{#each resource.subresources}}
      {{@key}}: factory(client, `${path}/{{@key}}`),
      {{/each}}
    };
  };

  {{#if resource.operations.list}}
  /**
   * {{resource.operations.list.summary}}
   * @param {object} [query] - Query parameters
   */
  resource.list = (query = {}) => client.request({
    method: '{{resource.operations.list.method}}',
    url: parentPath || '/{{resource.name}}',
    params: query
  });
  {{/if}}

  {{#if resource.operations.create}}
  /**
   * {{resource.operations.create.summary}}
   * @param {object} data - The data to create.
   * @param {object} [query] - Query parameters
   */
  resource.create = (data, query = {}) => client.request({
    method: '{{resource.operations.create.method}}',
    url: parentPath || '/{{resource.name}}',
    data,
    params: query
  });
  {{/if}}

  return resource;
};

export default factory;
{{else}}
/**
 * {{pascalCase resource.name}} Resource
 * Generated: {{timestamp}}
 */

export class {{pascalCase resource.name}}Resource {
  /**
   * Create a new {{pascalCase resource.name}} resource
   * @param {ApiClient} client - API client instance
   */
  constructor(client) {
    this.client = client;
  }

  {{#each resource.operations}}
  /**
   * {{summary}}
   * {{description}}
   {{#each pathParams}}
   * @param {string} {{this}} - Path parameter
   {{/each}}
   {{#if hasRequestBody}}
   * @param {Object} data - Request body
   {{/if}}
   {{#if queryParams.length}}
   * @param {Object} [query] - Query parameters
   {{/if}}
   * @returns {Promise<{{returnType}}>} - Response with data and headers
   */
  async {{camelCase id}}({{#if pathParams}}{{#each pathParams}}{{this}}, {{/each}}{{/if}}{{#if hasRequestBody}}data{{#if queryParams.length}}, {{/if}}{{/if}}{{#if queryParams.length}}query = {}{{/if}}) {
    let url = '{{path}}'
      {{#each pathParams}}
      .replace(/\{{\s*{{{this}}}\s*\}}/, encodeURIComponent({{this}}))
      {{/each}};

    return await this.client.request({
      method: '{{method}}',
      url,
      {{#if queryParams.length}}
      params: query,
      {{/if}}
      {{#if hasRequestBody}}
      data,
      {{/if}}
    });
  }
  {{/each}}
}

export default {{pascalCase resource.name}}Resource;
{{/ifEquals}}
