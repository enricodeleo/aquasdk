import { QueryBuilder } from '../utils/queryUtils.js';

/**
 * Creates a factory for a sub-resource, making it callable and chainable.
 * @param {ApiClient} client - The API client instance.
 * @param {string} parentPath - The base path of the parent resource.
 * @param {object} subResource - The sub-resource definition from the OpenAPI spec.
 * @returns {function} A callable factory function for the sub-resource.
 * @private
 */
const subResourceFactory = (client, parentPath, subResource) => {
  /**
   * @param {string|number} id - The ID of the parent resource.
   * @returns {object} An object containing the next level of sub-resources.
   */
  const factory = (id) => {
    const newPath = `${parentPath}/${id}/${subResource.name}`;
    const subResources = {};
    for (const [key, value] of Object.entries(subResource.subResources)) {
      subResources[key] = subResourceFactory(client, newPath, value);
    }
    return subResources;
  };

  // Attach operations directly to the factory
  for (const op of subResource.operations) {
    /**
     * {{op.summary}}
     * @param {object} [params] - The parameters for the operation.
     * @param {object} [params.query] - The query parameters.
     * @param {object} [params.data] - The request body.
     {{#each op.pathParams}}
     * @param {string|number} params.{{this}} - Path parameter.
     {{/each}}
     * @returns {Promise<any>}
     */
    factory[op.id] = (params = {}) => {
      let path = op.path;
      const pathParams = op.pathParams || [];
      const bodyParams = op.hasRequestBody ? params.data : undefined;
      
      for(const p of pathParams) {
          if(params[p]) {
              path = path.replace(`{${p}}`, params[p]);
          }
      }

      return client.request({
        method: op.method,
        url: path,
        params: params.query,
        data: bodyParams,
      });
    };
  }
  
  return factory;
};

/**
 * Creates a factory for the {{pascalCase resource.name}} resource.
 * This factory produces a function that is both callable for sub-resources
 * and has methods for top-level resource operations.
 * @param {ApiClient} client - The API client instance.
 * @returns {function} A callable resource function.
 */
export default function {{pascalCase resource.name}}Factory(client) {
  /**
   * Access sub-resources of a specific {{resource.name}} instance.
   * @param {string|number} id - The ID of the {{resource.name}} instance.
   * @returns {object} An object containing the sub-resources.
   */
  const resourceFn = (id) => {
    const subResources = {};
    for (const [key, value] of Object.entries(resource.subResources)) {
      subResources[key] = subResourceFactory(client, `/${resource.name}/${id}`, value);
    }
    return subResources;
  };
  
  /**
   * Starts a new query for finding {{resource.name}} records.
   * @param {object} [criteria] - The criteria to filter records.
   * @returns {QueryBuilder} A QueryBuilder instance.
   */
  resourceFn.find = (criteria) => {
    return new QueryBuilder({
      client,
      method: 'get',
      path: '/{{resource.name}}',
      criteria,
    });
  };

  /**
   * Starts a new query for finding a single {{resource.name}} record.
   * @param {string|number|object} [criteria] - The ID or criteria to find a single record.
   * @returns {QueryBuilder} A QueryBuilder instance that resolves to a single object.
   */
  resourceFn.findOne = (criteria) => {
    const path = (typeof criteria === 'string' || typeof criteria === 'number')
      ? '/{{resource.name}}/{id}'
      : '/{{resource.name}}';
      
    const filter = (typeof criteria === 'object' && criteria !== null) ? criteria : { id: criteria };

    const qb = new QueryBuilder({
      client,
      method: 'get',
      path: path,
      criteria: filter,
    });

    // Ensure findOne resolves to a single object, not an array
    const originalExecute = qb.execute;
    qb.execute = async function() {
      if (!path.includes('/{id}')) {
        this.limit(1);
      }
      const response = await originalExecute.call(this);
      if (response.data && Array.isArray(response.data)) {
        return {
          ...response,
          data: response.data.length > 0 ? response.data[0] : null,
        };
      }
      return response;
    };
    
    return qb;
  };

  /**
   * Creates a new {{resource.name}} record.
   * @param {object} data - The data for the new record.
   * @returns {Promise<any>} A promise that resolves with the created record.
   */
  resourceFn.create = (data) => {
    return client.request({
      method: 'post',
      url: '/{{resource.name}}',
      data,
    });
  };

  /**
   * Updates a {{resource.name}} record by its ID.
   * @param {string|number} id - The ID of the record to update.
   * @param {object} data - The data to update the record with.
   * @returns {Promise<any>} A promise that resolves with the updated record.
   */
  resourceFn.update = (id, data) => {
    return client.request({
      method: 'patch',
      url: `/{{resource.name}}/${id}`,
      data,
    });
  };

  /**
   * Destroys a {{resource.name}} record by its ID.
   * @param {string|number} id - The ID of the record to destroy.
   * @returns {Promise<any>} A promise that resolves when the record is destroyed.
   */
  resourceFn.destroy = (id) => {
    return client.request({
      method: 'delete',
      url: `/{{resource.name}}/${id}`,
    });
  };

  {{#each resource.operations}}
  /**
   * {{summary}}
   * {{description}}
   {{#each pathParams}}
   * @param {string|number} {{this}} - Path parameter.
   {{/each}}
   {{#if hasRequestBody}}
   * @param {object} data - Request body.
   {{/if}}
   {{#if queryParams.length}}
   * @param {object} [query] - Query parameters.
   {{/if}}
   * @returns {Promise<{{returnType}}>}
   */
  resourceFn.{{camelCase id}} = ({{#if pathParams}}{{#each pathParams}}{{this}}, {{/each}}{{/if}}{{#if hasRequestBody}}data, {{/if}}{{#if queryParams.length}}query = {}{{/if}}) => {
    let url = '{{path}}';
    {{#each pathParams}}
    url = url.replace('{{"{"}}{{this}}{{"}"}}', encodeURIComponent({{this}}));
    {{/each}}

    return client.request({
      method: '{{method}}',
      url,
      {{#if queryParams.length}}
      params: query,
      {{/if}}
      {{#if hasRequestBody}}
      data,
      {{/if}}
    });
  };
  {{/each}}

  return resourceFn;
}

