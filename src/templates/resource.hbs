{{#ifEquals strategy 'hierarchical'}}
/**
 * Resource factory for {{resource.name}}
 * Generated: {{timestamp}}
 */
import { QueryChain } from '../utils/queryUtils.js';

const factory = (client, parentPath = '') => {
  // This function is for accessing sub-resources, e.g., api.users(123)
  const resource = (id) => {
    const path = parentPath ? `${parentPath}/{{resource.name}}/${id}` : `{{resource.name}}/${id}`;
    const subResources = {};
    {{#each resource.subresources}}
    subResources.{{@key}} = factory(client, path);
    {{/each}}
    return subResources;
  };

  {{#if resource.operations.find}}
  /**
   * Find multiple records
   * @param {object} [criteria] - The criteria to filter by.
   * @returns {QueryChain}
   */
  resource.find = (criteria = {}) => {
    const path = parentPath || '/{{resource.name}}';
    return new QueryChain(client, path, criteria);
  };
  {{/if}}

  {{#if resource.operations.findOne}}
  /**
   * Find a single record
   * @param {string|number|object} criteria - The ID or criteria to find by.
   * @returns {QueryChain}
   */
  resource.findOne = (criteria) => {
    const path = parentPath || '/{{resource.name}}';
    let requestPath = path;
    let query = {};

    if (typeof criteria === 'object' && criteria !== null) {
      query = criteria;
    } else {
      requestPath = `${path}/${criteria}`;
    }
    
    const queryChain = new QueryChain(client, requestPath, query);
    
    // Make it "thenable" and ensure it resolves to a single object
    queryChain.then = (resolve, reject) => {
      queryChain.limit(1).execute().then(response => {
        if (response.data && Array.isArray(response.data)) {
          response.data = response.data[0] || null;
        }
        resolve(response);
      }, reject);
    };

    return queryChain;
  };
  {{/if}}

  {{#if resource.operations.create}}
  /**
   * Create a new record
   * @param {object} data - The data to create.
   */
  resource.create = (data) => client.request({
    method: '{{resource.operations.create.method}}',
    url: parentPath || '/{{resource.name}}',
    data
  });
  {{/if}}

  {{#if resource.operations.update}}
  /**
   * Update an existing record
   * @param {string|number} id - The ID of the record to update.
   * @param {object} data - The data to update.
   */
  resource.update = (id, data) => client.request({
    method: '{{resource.operations.update.method}}',
    url: `${parentPath || '/{{resource.name}}'}/${id}`,
    data
  });
  {{/if}}

  {{#if resource.operations.destroy}}
  /**
   * Destroy an existing record
   * @param {string|number} id - The ID of the record to destroy.
   */
  resource.destroy = (id) => client.request({
    method: '{{resource.operations.destroy.method}}',
    url: `${parentPath || '/{{resource.name}}'}/${id}`
  });
  {{/if}}

  return resource;
};

export default factory;
{{else}}
/**
 * {{pascalCase resource.name}} Resource
 * Generated: {{timestamp}}
 */
import { QueryChain } from '../utils/queryUtils.js';

export class {{pascalCase resource.name}}Resource {
  constructor(client) {
    this.client = client;
    this.resourcePath = '/{{resource.name}}';
  }

  find(criteria = {}) {
    return new QueryChain(this.client, this.resourcePath, criteria);
  }

  findOne(criteria) {
    let requestPath = this.resourcePath;
    let query = {};

    if (typeof criteria === 'object' && criteria !== null) {
      query = criteria;
    } else {
      requestPath = `${this.resourcePath}/${criteria}`;
    }
    
    const queryChain = new QueryChain(this.client, requestPath, query);
    
    queryChain.then = (resolve, reject) => {
      queryChain.limit(1).execute().then(response => {
        if (response.data && Array.isArray(response.data)) {
          response.data = response.data[0] || null;
        }
        resolve(response);
      }, reject);
    };

    return queryChain;
  }

  create(data) {
    return this.client.request({
      method: 'post',
      url: this.resourcePath,
      data
    });
  }

  update(id, data) {
    return this.client.request({
      method: 'patch',
      url: `${this.resourcePath}/${id}`,
      data
    });
  }

  destroy(id) {
    return this.client.request({
      method: 'delete',
      url: `${this.resourcePath}/${id}`
    });
  }
}

export default {{pascalCase resource.name}}Resource;
{{/ifEquals}}
