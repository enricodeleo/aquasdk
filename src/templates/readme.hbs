# {{apiInfo.title}} - JavaScript SDK

{{apiInfo.description}}

## Installation

```bash
npm install {{camelCase apiInfo.title}}-sdk
```

## Available Resources

{{#each resourceNames}}
- `{{this}}`
{{/each}}

## Basic Usage

```javascript
import API from '{{camelCase apiInfo.title}}-sdk';

// Initialize the SDK
const api = new API({
  baseUrl: '{{apiInfo.baseUrl}}',
  auth: {
    token: 'your-auth-token'
    // Or use basic auth
    // username: 'user',
    // password: 'pass'
  },
  // Additional Axios configuration options
  timeout: 5000,
  headers: {
    'Custom-Header': 'value'
  },
  // Custom parameter serializer
  paramsSerializer: {
    serialize: (params) => {
      // Custom parameter serialization logic
      return Object.entries(params)
        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
        .join('&');
    }
  }
});

// Examples using the Waterline-like syntax
async function examples() {
  // Find all records
  const allRecordsResponse = await api.{{exampleResourceName}}.find().execute();
  const allRecords = allRecordsResponse.data;

  // Find with criteria
  const filteredRecordsResponse = await api.{{exampleResourceName}}
    .find({ field: 'value' })
    .execute();
  const filteredRecords = filteredRecordsResponse.data;

  // With pagination and sorting
  const paginatedRecordsResponse = await api.{{exampleResourceName}}
    .find()
    .limit(10)
    .skip(20)
    .sort('createdAt DESC')
    .execute();
  const paginatedRecords = paginatedRecordsResponse.data;

  // Find one by ID with optional populate
  const recordResponse = await api.{{exampleResourceName}}.findOne(123).populate(['field1', 'field2']);
  const record = recordResponse.data;

  // Create a record
  const newRecordResponse = await api.{{exampleResourceName}}.create({
    field1: 'value1',
    field2: 'value2'
  });
  const newRecord = newRecordResponse.data;

  // Update a record
  const updatedRecordResponse = await api.{{exampleResourceName}}.update(123, {
    field1: 'updated value'
  });
  const updatedRecord = updatedRecordResponse.data;

  // Delete a record
  const deleteResponse = await api.{{exampleResourceName}}.destroy(123);

  // Count records matching criteria
  const countResponse = await api.{{exampleResourceName}}.find({ field: 'value' }).count();
  const count = countResponse.data.count;

  // Access response headers (e.g., for any method)
  console.log('Response headers:', allRecordsResponse.headers);
}
```

## Custom Operations and Sub-resources

For specialized endpoints, including sub-resources (e.g., `/resource/{id}/subresource`), custom methods are generated on the parent resource class based on the OpenAPI paths. These methods are named using the operationId or derived from the method and path (e.g., `getResourceIdSubresource`).

Check the generated resource files (in `resources/`) or JSDoc for available custom methods and their parameters.

Example (assuming a sub-resource method):
```javascript
const subresourceResponse = await api.{{exampleResourceName}}.getIdSubresource({ id: 123, queryParam: 'value' });
const subresource = subresourceResponse.data;
```

## SDK Documentation

For detailed API documentation, refer to the JSDoc in the generated resource and model files.

## SDK Version

`{{apiInfo.version}}`
